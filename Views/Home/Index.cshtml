@{
    ViewData["Title"] = "Home Page";
}



<div class="container min-vh-100">
    @* <div class="row border py-2 px-4">
        <button class="btn btn-success w-25 py-3" id="new-patient-btn">Add Patient</button>
    </div> *@
    <div class="row border py-2">
        <div class="col d-flex justify-content-center align-items-center text-center">
            <div class="mx-md-4">Filter By:</div>
            <div id="filter" class="d-flex justify-content-around gap-1">
                <button id="ward-filter" class="btn btn-light d-block rounded-0"></button>
                <button id="clinician-filter" class="btn btn-light d-block rounded-0"></button>
            </div>
        </div>
        <div class="col d-flex justify-content-center align-items-center text-center">
            <div class="mx-md-4">Ward Selected:</div>
            <div class="d-flex">
                <form action="" class="">
                    <div class="form-group">
                        <select id="ward-select-option" class="form-select">
                        </select>
                    </div>
                </form>
            </div>
        </div>
        <div class="col d-flex justify-content-center align-items-center text-center">
            <div class="mx-md-4">Clinician Reviewing:</div>
            <div class="d-flex">
                <span id="current-doctor" class="d-block border border-success px-4">Dr. Amani</span>
            </div>
        </div>
    </div>
    <div class="row border py-2 px-4 d-flex justify-content-between">
        <button class="btn btn-success w-25 py-3" id="new-patient-btn">Add Patient</button>

        <button class="btn btn-warning w-25 py-3" id="commit-all-patient-data">Commit All</button>
    </div>
    <div class="row border py-2">
        <table class="table">
            <thead>
                <tr>
                    <th class="text-danger">#</th>
                    <th class="">Patient</th>
                    <th class="">Start Date</th>
                    <th class="">Review Time</th>
                    <th class="">Exit Time</th>
                    <th class="">Review Outcome</th>
                    <th class="">Comment</th>
                    <th class="">
                        <div class="form-check">
                        <label class="form-check-label" for="flexCheckDefault">
                            Select All
                        </label>
                        <input class="form-check-input" type="checkbox" value="" id="flexCheckDefault">
                        </div>                        
                    </th>
                    <th class=""></th>
                </tr>
            </thead>
            <tbody id="patient-items">
            </tbody>
        </table>
    </div>
    <!-- Pagination Section -->
    <div class="row  d-flex justify-content-center" id="page-section">
        <div class="d-flex flex-row justify-content-around align-items-center w-50">
            <button class="btn text-warning" id="prev-page">
                <i class="fa fa-chevron-left fa-3x"></i>
            </button>
            <div class="page-text">
                <span class="text-danger">Page</span>
                <span class="" id="current-page-text"></span>
                <span class="text-danger">of</span>
                <span class="" id="last-page-text"></span>
            </div>
            <button class="btn text-warning" id="next-page">
                <i class="fa fa-chevron-right fa-3x"></i>
            </button>
        </div>
    </div>

</div>


<dialog class="team-dialog" id="team-dialog">
    <div class="row border-bottom border-1 border-success mx-3 py-2">
        <div class="lead" id="comment-title">Add Comment</div>
    </div>
    <form id="comment-form" class="row p-3" >
            <div class="form-group mb-3 d-none">
                <input type="text" class="form-control col-12" id="patient-id" placeholder="">
            </div>
            <div class="form-group mb-3">
                <textarea class="form-control col-12" id="patient-item-comment" cols="30" rows="2"></textarea>
            </div>
            <div class="form-group d-flex justify-content-between">
                <button class="btn btn-danger col-5" id="comment-cancel">Cancel</button>
                <button class="btn btn-success col-5" id="comment-add">Add</button>
            </div>
    </form>
</dialog>

<dialog class="patient-dialog" id="patient-dialog">
    <div class="row border-bottom border-1 border-success mx-3 py-2">
        <div class="lead" id="patient-dialog-title">Add Patient</div>
    </div>
    <div class="row border-bottom border-1 border-success mx-3 py-2 d-none" id="patient-dialog-error">
        <div class="text-danger app-bg-danger" id="patient-dialog-error-label"></div>
    </div>
    <form id="new-patient-form" class="row p-3" >
            <div class="form-group mb-3">
                <input type="date" class="form-control col-12" id="patient-startdate" placeholder="Enter Start Date">
            </div>
            <div class="form-group mb-3">
                <input type="text" class="form-control col-12" id="patient-firstName" placeholder="Enter FirstName">
            </div>
            <div class="form-group mb-3">
                <input type="text" class="form-control col-12" id="patient-lastName" placeholder="Enter LastName">
            </div>
            <div class="form-group mb-3">
                <select class="form-control col-12" id="patient-doctor-dutyid"></select>
            </div>
            <div class="form-group mb-3">
                <select class="form-control col-12" id="patient-ward-id"></select>
            </div>
            <div class="form-group d-flex justify-content-between" style="column-gap: 1.5em;">
                <button class="btn btn-danger col py-3" id="patient-cancel">Cancel</button>
                <button class="btn btn-success col py-3" id="patient-add">Add</button>
            </div>
    </form>
</dialog>



@section Scripts {
    <script type="text/javascript">
        $(document).ready(async function () {
            /*
                1. 
            */

            /* Declarations */
            let messageLabel = "";

            const commentDialog = ".team-dialog";
            //const dialogForm = ".dialog-form";
            const commitAllDataBtnIdentifier = "#commit-all-patient-data";
            const tableBodyIdentitfier = "#patient-items";
            const allCheckInputIdentifier = "#flexCheckDefault";
            const patientItemIdentifiers = { 
                tr: ".patient-item",
                reviewTime: ".patient-item-review-time",
                startTime: ".patient-item-start-time",
                exitTime: ".patient-item-exit-time",
                reviewOutcome: ".review-outcome",
                comment: ".patient-item-comment",
                checked: ".patient-item-checked",
                submitBtn: ".patient-item-btn"
            };

            const postPatientPayload = { 
                patientId: 0,
                reviewOutcomId: 0,
                comment: "",
                reviewTime: null,
                exitTime: null,
                startDate: null
            };

            const commentFormSelectors = {
                commentTitle: "#comment-title",
                formPatientId: "#patient-id",
                commentCancel: "#comment-cancel",
                commentAdd: "#comment-add",
                dialogCommentForm: "#comment-form",
                commentDialog: "dialog",
                commentText: "#patient-item-comment"
            };
            const defaultComment = { patientId: 0, text: "" };

            const pagePaginationIdentifiers = {
                section: "#page-section",
                prevBtn: "#prev-page",
                nextBtn: "#next-page",
                currentPageText: "#current-page-text",
                lastPageText: "#last-page-text",
            }

            const defaultPagePaginationState = {
                displayPagintation: false,
                currentPageValue: 1,
                lastPageValue: 0,
                pageSize: 0,
                prevPage: false,
                nextPage: false
            };

            let pagePaginationState = {
                displayPagintation: false,
                currentPageValue: 1,
                lastPageValue: 0,
                pageSize: 0,
                prevPage: false,
                nextPage: false
            };

            let newPatient = {
                btn: "#new-patient-btn",
                dialog: "#patient-dialog",
                title: "#patient-dialog-title",
                error: {
                    div: "#patient-dialog-error",
                    label: "#patient-dialog-error-label"
                },
                form: {
                    name: "#new-patient-form",
                    startDate: "#patient-startdate",
                    firstName: "#patient-firstName",
                    lastName: "#patient-lastName",
                    dutySelect: "#patient-doctor-dutyid",
                    wardSelect: "#patient-ward-id",
                    cancelBtn: "#patient-cancel",
                    submitBtn: "#patient-add"
                },
                dto: {
                    requiredProps: [
                    "startDate", "firstName", "lastName", "userId", "dutyTypeId"],
                    formData: {
                        startDate: "",
                        firstName: "",
                        lastName: "",
                        userId: "",
                        dutyTypeId: "",
                        wardId: null
                    }
                }
                
            };

            let shouldShowPagination = false;

            let filterElement = $("#filter");
            let wardFilterBtn = $("#ward-filter");
            let clinicianFilterBtn = $("#clinician-filter");
            let wardSelectElement = $("#ward-select-option");
            let currentDoctorElement = $("#current-doctor");

            let setupData = {};
            let currentFilter = "";

            /* Actions */
            await loadSetupData();

            wardFilterBtn.click(async function(){
                wardSelectElement.attr("disabled", false);
                 $(this).removeClass("btn-light").addClass("btn-success");
                 currentFilter = $(this).text();
                 clinicianFilterBtn.removeClass("btn-success").addClass("btn-light");
                 setPaginationDefaultOptions();

                 //alert(currentFilter);
                await loadPatients();

            });

            clinicianFilterBtn.click(async function(){
                wardFilterBtn.removeClass("btn-success").addClass("btn-light");
                wardSelectElement.attr("disabled", true);
                $(this).removeClass("btn-light").addClass("btn-success");
                currentFilter = "";
                setPaginationDefaultOptions();

                await loadPatients();

            });

            wardSelectElement.change( async function(event){
               /*
                   1. maker api call to GetPatients(doctorId, dutyTypeId, wardId );
                   2. use this to populate the table 
               */

               let { userId, dutyTypeId} = setupData.doctor;
               let [wardVal, wardText] = appJS.getSelectedValueAndText(this);
               //console.log({ wardVal, wardText });
               let wardId = parseInt(wardVal);
               setPaginationDefaultOptions();

               await getPatients(userId, dutyTypeId, wardId);
               await popuatePatientTable();

            });

            $(allCheckInputIdentifier).change(toggleAllPatientsCheckInput);

            $(commitAllDataBtnIdentifier).click(handleAllPatientsDataCommit);

            $(commentFormSelectors.commentCancel).click(function(evt){
                evt.preventDefault();                
                let patientId = parseInt($(commentFormSelectors.formPatientId).data("patient-id"));
                let patientCommentItem = setupData.comments.find(x =>x.patientId == patientId);
                patientName = $(this).closest(commentFormSelectors.commentDialog).find(`${commentFormSelectors.commentTitle} span`).text();
                if(patientCommentItem){
                    setupData.comments = setupData.comments.filter(x =>x.patientId !== patientId);
                    //display notification
                    appJS.displayWarning({ title: `Patient Comment`, message: `${patientName} comment removed`});
                }

                commentToggleDisplay(patientId, false);
                $(commentFormSelectors.dialogCommentForm)[0].reset();
                $(commentFormSelectors.commentDialog)[0].close();
            });

            $(commentFormSelectors.commentAdd).click(async function(evt){
                evt.preventDefault();

                let targetComment = { ...defaultComment };
                let commentForm = $(commentFormSelectors.dialogCommentForm);
                let patientIdString = $(commentFormSelectors.formPatientId).data("patient-id");
                targetComment.text = $(commentFormSelectors.commentText).val();
                
                targetComment.patientId = parseInt(patientIdString);
                let patientItem = setupData.patients.find(x =>x.patientId === targetComment.patientId);

                //appJS.appAlert(targetComment);
                setupData.comments = setupData.comments.filter(x =>x.patientId !==  targetComment.patientId);
                setupData.comments.push(targetComment);

                messageLabel = `Added comment for ${patientItem.lastName}, ${patientItem.firstName}`;
                //console.log({ comments: setupData.comments });
                appJS.displaySuccess({ message: messageLabel, title: "Doctor's Comment" }); 
                commentToggleDisplay(targetComment.patientId, true);

                $(commentFormSelectors.dialogCommentForm)[0].reset();
                $(commentFormSelectors.commentDialog)[0].close();

            });

            $(pagePaginationIdentifiers.prevBtn).click(async function(evt){
                /*
                    1. set pagePaginationState.currentPageValue--
                    2. set pagePaginationState.prevPage = true
                    3. call handler
                */
                if(pagePaginationState.currentPageValue > 1){
                    pagePaginationState.currentPageValue -=1;
                    pagePaginationState.prevPage = true;
                    await paginateHandler();
                    //alert("process");
                    $(pagePaginationIdentifiers.nextBtn).prop("disabled", false);
                    $(pagePaginationIdentifiers.nextBtn).addClass("text-warning");
                }
                else{
                    $(this).prop("disabled", true);
                    $(this).removeClass("text-warning");

                    //alert("disabled");
                }
                
            });

            $(pagePaginationIdentifiers.nextBtn).click(async function(evt){
                /*
                    1. set pagePaginationState.currentPageValue++
                    2. call handler
                */
                if(pagePaginationState.currentPageValue < pagePaginationState.lastPageValue ){
                    pagePaginationState.currentPageValue +=1;
                    pagePaginationState.nextPage = true;
                    await paginateHandler();
                    //alert("process");
                    $(pagePaginationIdentifiers.prevBtn).prop("disabled", false);
                    $(pagePaginationIdentifiers.prevBtn).addClass("text-warning");
                }
                else{
                    $(this).prop("disabled", true);
                    $(this).removeClass("text-warning");
                   // alert("disabled");
                }

            });

            $(newPatient.btn).click(function(){
                setupNewPatientData();
                $(newPatient.dialog)[0].showModal();
                //alert("hi")
            });



            /* implementations */

              async function loadSetupData(){
                messageLabel = "Loading Setup Data";

                toggleCommitAllBtn(true);
                var options = appJS.makeApiCallDefaultOption();
                await appJS.setSpinnerPromise(true);
                var url = '@Url.Action("SetupData", "Home")';
                var res = await appJS.makeApiCall(url, options);

                appJS.setSpinnerPromise(false, 1000);
                if(res.data.status){
                    setupData = {...res.data.data[0], patients: [], comments: []};
                    //await getPatients(1, 1, 1);
                    //console.log({ setupData });
                    populateSetupData();
                    await loadPatients();
                }
                else {
                     appJS.displayError({ message: `Error ${messageLabel}`, title: messageLabel }); 
                }


            }

            function getApiQueryParams(){
                let wardId = null;
                let { userId } = setupData.doctor;
                let duty = null;
                if(currentFilter === 'Ward'){
                    let [ wardIdVal, text ] = appJS.getSelectedValueAndText(wardSelectElement)
                    wardId = parseInt(wardIdVal);
                    duty = setupData.dutyTypes.find(x =>x.name === 'Ward');
                }else{
                    duty = setupData.dutyTypes.find(x =>x.name !== "Ward");
                }

                return { userId, dutyTypeId: duty.dutyTypeId, wardId };
            }

            async function loadPatients(){
                let { userId, dutyTypeId, wardId } = getApiQueryParams();
                await getPatients(userId, dutyTypeId, wardId);
            }

            function setupFilterElements(){
                var dutyTypes = setupData.dutyTypes;
                var ward = dutyTypes.find(x => x.name === 'Ward');
                wardFilterBtn.text(ward.name);
                wardFilterBtn.removeClass("btn-light").addClass("btn-success");
                currentFilter = ward.name;

                var clinician = dutyTypes.find(x => x.name !== 'Ward');
                clinicianFilterBtn.text(clinician.name);
            }
            function setupWardElements(){
                const wards = setupData.wards;
                const dataChoices = wards.map(item =>({ label: item.name, labelValue: item.wardId.toString()}) ) ;
                const selector = "#ward-select-option";
                //const defaultOption = "Select a Team"; 
                $(selector).empty();                   
                appJS.populateSelect(dataChoices, selector, null);
            }
            function setupDoctorElement(){
                let doctorsName = `Dr. ${setupData.doctor.lastName}, ${setupData.doctor.firstName}`;
                currentDoctorElement.text(doctorsName);
            }

            function populateSetupData(){
                setupFilterElements();
                setupWardElements();
                setupDoctorElement();
            }

            async function getPatients(doctorId, dutyTypeId, wardId = null){
                messageLabel = "Fetching Patient Data";

                let page = null;
                let { prevPage,  nextPage, currentPageValue} = pagePaginationState;
                if(prevPage || nextPage) page = currentPageValue;


                var options = appJS.makeApiCallDefaultOption();
                await appJS.setSpinnerPromise(true);
                var url = '@Url.Action("DoctorsPatient", "Home")' + `/${doctorId}/${dutyTypeId}/${wardId}?page=${page}`;
                //console.log({ url});
                var res = await appJS.makeApiCall(url, options);

                appJS.setSpinnerPromise(false, 1000);
                if(res.data.status){
                    let data = res.data.data;
                    
                    //console.log({ data, page: res.data });
                    setupPagination(res.data)
                    setupData.patients = data ;
                    popuatePatientTable();
                }
                else {
                     appJS.displayError({ message: `Error ${messageLabel}`, title: messageLabel }); 

                }

            }

            async function popuatePatientTable(){

                const patientData = setupData.patients;
                let tableBody = "";
                let setupChildren = false;

                if(patientData && patientData.length > 0)
                {
                    const currentDate = appJS.getDisplayDate(new Date(), false);
                    patientData.map((patient, index) =>{
                        tableBody += `
                        <tr class="align-middle patient-item" data-patientid="${patient.patientId}">
                            <td class="text-danger">${index + 1}</td>
                            <td>${patient.lastName}, ${patient.firstName}</td>
                            <td class="patient-item-start-time">${appJS.formatDate(patient.startDate)}</td>
                            <td>
                                <input type="date" class="form-control patient-item-review-time" value="${currentDate}">
                            </td>
                            <td>
                                <input type="date" class="form-control patient-item-exit-time" value="">
                            </td>
                            <td>
                                <select class="form-control review-outcome" id="">
                                </select>
                            </td>
                            <td>
                                <button class="btn btn-light patient-item-comment">Add Comment</button>
                            </td>
                            <td>
                                <label for="form-check" class="">
                                    <input type="checkbox" class="form-check-input patient-item-checked"> <span class="px-1" style="font-size: 0.8rem;">Completed</span>
                                </label>
                            </td>
                            <td>
                                <button class="btn btn-primary patient-item-btn">Submit</button>
                            </td>
                        </tr>              
                        `;

                    });
                    setupChildren = true;

                }else{

                    tableBody = `
                    <tr>
                        <td colspan="9" class="lead text-danger text-center" style="font-size:2rem;">No Patient(s)</td>
                    </tr>`;

                }

               await displayAndSetupTableBody(tableBody, setupChildren);

            }

            async function displayAndSetupTableBody(tableBody, setupChildren = false){
                $(tableBodyIdentitfier).html(tableBody);
                if(setupChildren){
                    setupPatientItemBtn();
                    setupPatientBtnToggleByCheckbox();
                    setupPatientItemReviewOutcomeOptions();
                    await setupAllPatientItemComment();

                }
            }

            function setupPatientItemBtn(){
                /* add a click handler to submit this patient items data ... */
                const patientSubmitBtns = $(patientItemIdentifiers.submitBtn);
                for(let i = 0; i < patientSubmitBtns.length; i++){
                    let btnItem = patientSubmitBtns[i];
                    btnItem.onclick = handlePatientDataSubmit;
                    $(btnItem).prop("disabled", true);
                }               
            }

            function setupPatientBtnToggleByCheckbox(){
                /* add a click handler to submit this patient items data ... */
                const patientCheckboxes = $(patientItemIdentifiers.checked);
                for(let i = 0; i < patientCheckboxes.length; i++){
                    let checkboxItem = patientCheckboxes[i];
                    checkboxItem.onclick = handlePatientBtnToggleByCheckbox;
                }               
            }

            function setupPatientItemReviewOutcomeOptions(){
                 /* populate all review outcome options for each patient */

                const reviewOutcomes = setupData.reviewOutcomes;
                if(reviewOutcomes.length){
                    let options = reviewOutcomes.map(item =>({
                        label: item.text, labelValue: item.reviewOutcomeId
                    }));

                    //get all patients review outcomes 
                    let patientsReviewOutcomeTags = $(patientItemIdentifiers.reviewOutcome);

                    if(patientsReviewOutcomeTags.length > 0){
                        patientsReviewOutcomeTags.map(revItemElem => {
                            appJS.populateSelect(options, patientsReviewOutcomeTags[revItemElem], null);
                        })
                    }

                }

            }
            function setupAllPatientItemComment(){
                const pCommentBtns = $(patientItemIdentifiers.comment);
                for(let i = 0; i < pCommentBtns.length; i++){
                    pCommentBtns[i].onclick = handlePatientItemCommentClick;
                }               
            }
            
            function toggleAllPatientsCheckInput(event){
                 /* 
                    1. get the value of the select all checks 
                    2. set all patient checks to this value 
                    3. toggle patient's submitBtn based on checkboxValue
                  */
                let allCheckInput = $(allCheckInputIdentifier);
                let allCheckInputValue = allCheckInput.prop("checked");
                let allPatientCheckInputs = $(`${patientItemIdentifiers.tr} ${patientItemIdentifiers.checked}`);
                if(allPatientCheckInputs.length > 0){
                    allPatientCheckInputs.map(patientCheckbox =>{
                        let patientItemCheckbox = allPatientCheckInputs[patientCheckbox];
                        //console.log({ patientCheckbox, allCheckInputValue });
                        $(patientItemCheckbox).prop("checked", allCheckInputValue);
                        doHandlePatientBtnToggleByCheckbox(patientItemCheckbox, allCheckInputValue);
                        //$(patientItemCheckbox).click();
                    });
                }
            }

            async function handleAllPatientsDataCommit(){
                 /* 
                    1. based on checkinput of true
                    2. get all patients checkinputs 
                    3. filter by checkinputs with true value i.e checked 
                    4. foreach checkinput 
                        a. get closest patientItemIdentifiers.tr element
                        b. get patientItem submitBtn
                        c. let patientPayload =  getPatientItemTrData(pSubmitElem);
                        d. add patientPayload to payloadCollection 
                    5. await postPatientItemData([patientPayload]);

                  */

                  messageLabel = "Commit all Patient Data";

                  let allCheckInputs = $(patientItemIdentifiers.checked);
                  if(allCheckInputs.length > 0){

                     let checkedPatientSubmitBtnCollection = [];
                     allCheckInputs.map(checkInputIndex =>{
                        checkInput = $(allCheckInputs[checkInputIndex]);
                        if(checkInput.prop("checked")){
                            let patientTrTag = checkInput.closest(patientItemIdentifiers.tr);
                            let pSubmitBtn = patientTrTag.find(patientItemIdentifiers.submitBtn);
                            checkedPatientSubmitBtnCollection.push(pSubmitBtn);
                            return pSubmitBtn;
                        }
                     });

                     if(checkedPatientSubmitBtnCollection.length > 0){

                        let pPayloads = [];
                        checkedPatientSubmitBtnCollection.map(async pItemSubmitBtn =>{
                            let payload = getPatientItemTrData(pItemSubmitBtn[0]);
                            pPayloads.push(payload);
                        });

                        await postPatientItemData(pPayloads);
                        setAllCheckInput(false);

                     }else{
                        appJS.displayError({ message: `No Patient checkbox marked as Completed!`, title: messageLabel }); 
                     }
                  }
            }

            function handlePatientBtnToggleByCheckbox(){
                /*
                    1. this handler is triggered by patient's checkbox value
                    2. toggles patient's submit button based on checkbox value
                    3. this is a checkbox event 
                */
                let patientCheckbox = $(this);
                doHandlePatientBtnToggleByCheckbox(patientCheckbox);
            }

            function doHandlePatientBtnToggleByCheckbox(elem, currentValue = null){
                let patientCheckbox = $(elem);
                let patientCheckboxValue = currentValue === null ? patientCheckbox.prop("checked") : currentValue;

                let patientTrElem = patientCheckbox.closest(patientItemIdentifiers.tr);
                let patientSubmitBtn = patientTrElem.find(patientItemIdentifiers.submitBtn);
                currentValue === null ? 
                    $(patientSubmitBtn).prop("disabled", !patientCheckboxValue) : $(patientSubmitBtn).prop("disabled", !patientCheckboxValue);
                setToggleCommitAllBtn();

            }

            async function handlePatientDataSubmit(event){
                event.preventDefault();
                let pSubmitElem = $(this);
                let patientPayload =  getPatientItemTrData(pSubmitElem);

                await postPatientItemData([patientPayload]);

            }
            async function handlePatientItemCommentClick(event){
                 /* 
                    1. onclick comment btn, add data props 
                        a. patientId
                    2. form should have 
                        a. text input id="patient-comment-by-doctor";
                        b. a cancel btn to close dialog 
                        c. an add btn to add text to setupData.comment list 
                    3. open dialog
                  */

                let patientTrElem = $(this).closest(patientItemIdentifiers.tr);
                let patientId = parseInt(patientTrElem.data("patientid"));
                let patientComment = setupData.patients.find(x => x.patientId === patientId);
                let commentTitle = `Comment for <span class="text-danger fw-bold">${patientComment.lastName}, ${patientComment.firstName}</span>`;
                let patientCommentItem = setupData.comments.find(x =>x.patientId == patientId);
                if(patientCommentItem){
                    $(commentFormSelectors.commentText).val(patientCommentItem.text);
                }

                $(commentFormSelectors.formPatientId).data("patient-id", patientId);

                $(commentFormSelectors.commentTitle).html(commentTitle);
                $(commentFormSelectors.commentDialog)[0].showModal();


            }

            function commentToggleDisplay(patientId, isAdd = false){
                //let patientId = parseInt(patientTrElem.data("patientid"));
                let trCommentBtn = $(`[data-patientid="${patientId}"] ${patientItemIdentifiers.comment}`)[0];
                let targetElem = $(trCommentBtn);
                if(isAdd){ 
                    targetElem.text("Added Comment");
                    targetElem.removeClass("btn-light").addClass("btn-comment")
                }else{
                    targetElem.text("Add Comment");
                    targetElem.removeClass("btn-comment").addClass("btn-light");
                }
            }

            function getPatientItemTrData(btnElem){
                let btnTrParent = btnElem.closest(patientItemIdentifiers.tr);

                btnTrParent = $(btnTrParent);

                let trData = { ...postPatientPayload };

                trData.patientId = parseInt(btnTrParent.data("patientid"));

                let pReviewTimeInput = btnTrParent.find(patientItemIdentifiers.reviewTime);
                trData.reviewTime = pReviewTimeInput.val();

                let pStartDateInput = btnTrParent.find(patientItemIdentifiers.startTime);
                trData.startDate = pStartDateInput.text();

                let pExitTimeInput = btnTrParent.find(patientItemIdentifiers.exitTime);
                trData.exitTime = pExitTimeInput.val();

                let pCheckedInput = btnTrParent.find(patientItemIdentifiers.checked);
                trData.checked = pCheckedInput.val();

                var pComment =  setupData.comments.length && setupData.comments.find(x =>x.patientId === trData.patientId);
                if(pComment) trData.comment = pComment.text;

                let pReviewOutcomeSelect = btnTrParent.find(patientItemIdentifiers.reviewOutcome);
                let [val, text ] = appJS.getSelectedValueAndText(pReviewOutcomeSelect);
                trData.reviewOutcomId = parseInt(val);


                //console.log({ trData });
                return trData;

            }

            async function postPatientItemData(postPayload){
                messageLabel = `Submitting ${postPayload.length} Data`;

                let { userId, dutyTypeId, wardId } = getApiQueryParams();

                postPayload = postPayload.map(x =>{
                   x.comment =  x.comment.trim() === '' ? null : x.comment.trim();
                   x.startDate = x.startDate.trim() === ''? null : x.startDate.trim();
                   x.exitTime = x.exitTime.trim() === ''? null : x.exitTime.trim();
                   x.userId = userId;
                   x.dutyTypeId = dutyTypeId;
                   x.wardId = wardId;

                   return x;
                })

                //console.log(postPayload.length);
                //appJS.appAlert(postPayload);
                //return;

                var options = appJS.makeApiCallDefaultOption();
                options.method = "POST";
                options.body = JSON.stringify(postPayload);

                await appJS.setSpinnerPromise(true);
                var url = '@Url.Action("Patient", "Home")';
                //console.log({ url});
                var res = await appJS.makeApiCall(url, options);

                appJS.setSpinnerPromise(false, 1000);
                if(res.data.status){
                    let data = res.data.data;

                    appJS.displaySuccess({ title: "Store Patient", message: res.data.message });
                    await loadPatients();
                }
                else {
                     appJS.displayError({ message: `Error ${messageLabel}`, title: messageLabel }); 

                }

            }

            function setToggleCommitAllBtn(){
                /*
                    1. set to true if two or more patients checkboxes are checked
                    2. get all patient checboxes
                    3. if atleast two patient checkboxes are checked set to true
                    4. else set to false

                */
                let allPatientCheckboxes = $(patientItemIdentifiers.checked);
                let toggleValue = false;
                let checkedCheckboxCollection = [];
                allPatientCheckboxes.map(mapIndex =>{
                    let checkItem = allPatientCheckboxes[mapIndex];
                    if($(checkItem).prop("checked")) checkedCheckboxCollection.push(checkItem);
                });

                (checkedCheckboxCollection.length > 1) ? toggleCommitAllBtn(false) : toggleCommitAllBtn(true);

            }

            /* utilities ... */
            function toggleCommitAllBtn(state){
                $(commitAllDataBtnIdentifier).prop("disabled", state);
            }

            function togglePageNavigation(){
               pagePaginationState.displayPagintation ? $(pagePaginationIdentifiers.section).removeClass("d-none") : $(pagePaginationIdentifiers.section).addClass("d-none");
            }

            function setupPagination({ page, pageSize, totalPages}){
                pagePaginationState.pageSize = pageSize;
                pagePaginationState.currentPageValue = page;
                pagePaginationState.lastPageValue = totalPages;
                pagePaginationState.displayPagintation = (totalPages > 1) ? true : false;

                displayPagination();
            }

            function displayPagination(){
                if(pagePaginationState.displayPagintation){
                    $(pagePaginationIdentifiers.currentPageText).text(pagePaginationState.currentPageValue);
                    $(pagePaginationIdentifiers.lastPageText).text(pagePaginationState.lastPageValue);
                }
                else 
                    togglePageNavigation();
            }

            async function paginateHandler(){
                await loadPatients();
            }

            function setPaginationDefaultOptions(){
                pagePaginationState = { ...defaultPagePaginationState };
            }

            async function setAllCheckInput(isChecked){
                let allCheckInput = $(allCheckInputIdentifier);
                let allCheckInputValue = allCheckInput.prop("checked");
                if(allCheckInputValue){
                    allCheckInput.prop("checked", isChecked);
                }
            }

            /*  Add New Patient Section  */
            $(`${newPatient.form.name} ${newPatient.form.cancelBtn}`).click(function(evt){
                evt.preventDefault();                
                @* let patientId = parseInt($(commentFormSelectors.formPatientId).data("patient-id"));
                let patientCommentItem = setupData.comments.find(x =>x.patientId == patientId);
                patientName = $(this).closest(commentFormSelectors.commentDialog).find(`${commentFormSelectors.commentTitle} span`).text();
                if(patientCommentItem){
                    setupData.comments = setupData.comments.filter(x =>x.patientId !== patientId);
                    //display notification
                    appJS.displayWarning({ title: `Patient Comment`, message: `${patientName} comment removed`});
                }
 *@
                //commentToggleDisplay(patientId, false);
                displayNewPatientError("", false);
                $(`${newPatient.form.name}`)[0].reset();
                $(`${newPatient.dialog}`)[0].close();
            });

            $(`${newPatient.form.name} ${newPatient.form.submitBtn}`).click(async function(evt){
                evt.preventDefault();
                displayNewPatientError("", false);

                /*
                    1. validate form data 
                        - lastName is not empty or null 
                        - firstName is not empty or null 
                        - dutyId is selected
                        - startDate is required
                        - ward is optional 
                            - if duty is clinician, ward is empty 
                            - if duty is Ward, ward selection is required
                */
                let messageLabel = `Submit New Patient`;
                let newPatientData = getNewPatientData();
                let [isValid, errorMessage] = validateNewPatientData({ ...newPatientData });
                if(!isValid){
                    //$(`${newPatient.form.name}`)[0].reset();
                    //$(`${newPatient.dialog}`)[0].close();
                    //appJS.displayError({ message: errorMessage, title: messageLabel});
                    displayNewPatientError(errorMessage);
                    return;
                }
                //post data 
                await postCreatePatient(newPatientData, messageLabel);
            });

            function displayNewPatientError(errorMsg, display=true){
                $(`${newPatient.error.label}`).html(errorMsg);
                (display) ?
                $(`${newPatient.error.div}`).removeClass("d-none") :
                $(`${newPatient.error.div}`).addClass("d-none");

            }

            function getNewPatientData(){
                let startDate = $(`${newPatient.form.name} ${newPatient.form.startDate}`).val();
                let firstName = $(`${newPatient.form.name} ${newPatient.form.firstName}`).val();
                let lastName = $(`${newPatient.form.name} ${newPatient.form.lastName}`).val();

                let dutyTypeId = appJS.getSelectedOption(`${newPatient.form.name} ${newPatient.form.dutySelect}`);
                let wardId = appJS.getSelectedOption(`${newPatient.form.name} ${newPatient.form.wardSelect}`);

                let formData = { ...newPatient.dto.formData };
                formData.firstName = firstName;
                formData.lastName = lastName;
                formData.startDate = startDate;
                formData.userId = parseInt(setupData.doctor.userId);
                formData.dutyTypeId = parseInt(dutyTypeId);
                formData.wardId = parseInt(wardId);

                return formData;

            }

            function validateNewPatientData(newPatientData){
                let isValid = true;
                let errorMessage = "";
                let errorList = [];
                let wardDuty = setupData.dutyTypes.find(x =>x.name === 'Ward');
                let wardDutyId = parseInt(wardDuty.dutyTypeId);

                let requiredProps = newPatient.dto.requiredProps;
                requiredProps.map(item =>{
                    var d = newPatientData[item];
                    if(d === null || d === undefined || !d.toString().trim().length) errorList.push(item);
                    if(item.endsWith("Id") && d === 0) errorList.push(item)
                });

                if(newPatientData.dutyTypeId === wardDutyId){
                    //wardId is then required
                   let formDataWardId =  newPatientData.wardId;
                   if(formDataWardId === 0) errorList.push("ward");

                }

                if(errorList.length){
                    isValid = false;
                    errorMessage = `The following are required:<ul>`;
                    errorList = [...new Set(errorList)];
                    errorList.map(err => {
                        if(err.endsWith("Id")) err = err.replace("Id", "");
                        let text = err[0].toUpperCase() + err.slice(1);
                        errorMessage += `<li>${text}</li>`;
                    })
                    errorMessage += "</ul>";
                }

                return [isValid, errorMessage];
            }

            async function postCreatePatient(postPayload, title){
                messageLabel = title;

                //appJS.appAlert(postPayload);
                //return;

                var options = appJS.makeApiCallDefaultOption();
                options.method = "POST";
                options.body = JSON.stringify(postPayload);

                await appJS.setSpinnerPromise(true);
                var url = '@Url.Action("CreatePatient", "Home")';
                //console.log({ url});
                var res = await appJS.makeApiCall(url, options);

                appJS.setSpinnerPromise(false, 1000);
                if(res.data.status){
                    let data = res.data.data;
                    $(`${newPatient.form.name}`)[0].reset();
                    $(`${newPatient.dialog}`)[0].close();
                    appJS.displaySuccess({ title: messageLabel, message: res.data.message });
                    
                }
                else {
                    displayNewPatientError(res.data.message);
                    //appJS.displayError({ message: `Error ${res.data.message}`, title: messageLabel }); 

                }

            }

            function setupNewPatientData(){
                setupNewPatientDoctor();
                setDefaultStartDate();
                setupDutyOptions();
                setupWardOptions();
            }

            function setupNewPatientDoctor(){
                let doctor = setupData.doctor;
                var title = `Add Patient to Doctor <span class="bg-light text-danger fw-bold">${doctor.lastName}, ${doctor.firstName}</span>`;

                let dialogTitle = `${newPatient.dialog} ${newPatient.title}`;
                $(dialogTitle).html(title);
            }

            function setDefaultStartDate(){
                let startDateCss = `${newPatient.form.name} ${newPatient.form.startDate}`;
                let today = appJS.getDisplayDate(new Date(), false);
                //console.log({ startDateCss, today})
                $(startDateCss).val(today);
            }

            function setupDutyOptions(){

                let dataChoices = setupData.dutyTypes.map(item =>({ label: item.name, labelValue: item.dutyTypeId }));
                let selectSelector = `${newPatient.form.name} ${newPatient.form.dutySelect}`;
                appJS.populateSelect(dataChoices, selectSelector, "Select a DutyType" );
            }

            function setupWardOptions(){

                let dataChoices = setupData.wards.map(item =>({ label: item.name, labelValue: item.wardId }));
                let selectSelector = `${newPatient.form.name} ${newPatient.form.wardSelect}`;
                appJS.populateSelect(dataChoices, selectSelector, "Select a Ward" );
            }



        });
    </script>
}
